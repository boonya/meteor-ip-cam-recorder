name: release

on:
  release:
    types: [published]

env:
  NODE: '12.20.1'
  METEOR: '2.0'
  METEOR_BUNDLE: 'meteor-bundle.tar.gz'

jobs:
  # lint:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checking repo out
  #       uses: actions/checkout@v1
  #     - name: Setup Node
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ env.NODE }}
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Linting
  #       run: npm run lint

  # test:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checking repo out
  #       uses: actions/checkout@v1
  #     - name: Setup Meteor
  #       uses: meteorengineer/setup-meteor@v1
  #       with:
  #         meteor-release: ${{ env.METEOR }}
  #     - name: Install dependencies
  #       run: meteor npm install
  #     - name: Run tests
  #       run: npm run test

  build:
    runs-on: ubuntu-20.04
    # needs: [lint, test]
    steps:
      - name: Checking repo out
        uses: actions/checkout@v1

      - name: Setup Meteor
        uses: meteorengineer/setup-meteor@v1
        with:
          meteor-release: ${{ env.METEOR }}

      - name: Install dependencies
        run: meteor npm install

      - name: Build application
        run: npm run build

      - name: Rename bundle file
        run: |
          mv ${{ github.event.repository.name }}.tar.gz ${{ env.METEOR_BUNDLE }}
        shell: bash

      - name: Upload Meteor Bundle to the Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.METEOR_BUNDLE }}
          path: ${{ env.METEOR_BUNDLE }}

  # release-bundle:
  #   runs-on: ubuntu-20.04
  #   needs: [build]
  #   steps:
  #     - name: Download bundle Artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ env.METEOR_BUNDLE }}

  #     - name: Retrieve UPLOAD_URL
  #       id: get_upload_url
  #       run: |
  #         TAG=$(echo ${{ github.ref }} | cut -d'/' -f 3)
  #         REPO=${{ github.repository }}
  #         upload_url=$(curl -sL https://api.github.com/repos/${REPO}/releases/tags/${TAG} | jq -r '.upload_url')
  #         echo ::set-output name=UPLOAD_URL::$upload_url
  #       shell: bash

  #     - name: Upload Meteor Bundle to Release Assets
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
  #         asset_path: ./${{ env.METEOR_BUNDLE }}
  #         asset_name: ${{ env.METEOR_BUNDLE }}
  #         asset_content_type: application/gzip

  docker:
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
      - name: Download bundle Artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.METEOR_BUNDLE }}

      - name: Get the lateest tag
        id: get_tag
        run: |
          TAG=$(echo ${{ github.ref }} | cut -d'/' -f 3)
          echo ::set-output name=tag::$TAG
        shell: bash

      - name: Debug
        id: debug
        run: |
          ls -alh ./
          pwd
          echo ${{ github.ref }} | cut -d'/' -f 3
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64, linux/arm64
          build-args: |
            BUNDLE=./${{ env.METEOR_BUNDLE }}
          push: true
          tags: |
            ${{ github.repository }}:latest
            ${{ github.repository }}:${{ steps.get_tag.outputs.tag }}

      - name: Docker Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
